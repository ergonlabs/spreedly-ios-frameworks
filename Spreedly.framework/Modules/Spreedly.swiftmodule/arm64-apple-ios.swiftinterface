// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios12.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Spreedly
import Foundation
import PassKit
@_exported import Spreedly
import Swift
public protocol SpreedlyClient {
  func createPaymentMethodFrom(creditCard: Spreedly.CreditCardInfo) -> Spreedly.SingleTransaction
  func createPaymentMethodFrom(bankAccount: Spreedly.BankAccountInfo) -> Spreedly.SingleTransaction
  func recache(token: Swift.String, verificationValue: Spreedly.SpreedlySecureOpaqueString) -> Spreedly.SingleTransaction
  func createPaymentMethodFrom(applePay: Spreedly.ApplePayInfo) -> Spreedly.SingleTransaction
  var config: Spreedly.ClientConfiguration { get }
}
public enum SpreedlySecurityError : Swift.Error {
  case invalidOpaqueString
  public static func == (a: Spreedly.SpreedlySecurityError, b: Spreedly.SpreedlySecurityError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc(SPRClient) public protocol _ObjCClient {
  @objc(createPaymentMethodFrom:) func _objCCreatePaymentMethod(from: Spreedly.PaymentMethodInfo) -> Spreedly.SingleTransaction
  @objc(recacheWithToken:verificationValue:) func _objCRecache(token: Swift.String, verificationValue: Spreedly.SpreedlySecureOpaqueString) -> Spreedly.SingleTransaction
}
@_inheritsConvenienceInitializers @objc(SPRClientFactory) public class ClientFactory : ObjectiveC.NSObject {
  public static func create(with config: Spreedly.ClientConfiguration) -> Spreedly.SpreedlyClient
  @objc(createWithConfig:) public static func _objCCreate(with config: Spreedly.ClientConfiguration) -> Spreedly._ObjCClient
  @objc deinit
  @objc override dynamic public init()
}
extension Dictionary where Key == Swift.String, Value == Any {
}
public enum StorageState : Swift.String {
  case cached
  case retained
  case redacted
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc(SPRStorageState) public enum _ObjCStorageState : Swift.Int {
  case unknown = 0
  case cached
  case retained
  case redacted
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum PaymentMethodType : Swift.String {
  case creditCard
  case bankAccount
  case applePay
  case googlePay
  case thirdPartyToken
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc(SPRPaymentMethodType) public enum _ObjCPaymentMethodType : Swift.Int {
  case unknown = 0
  case creditCard
  case bankAccount
  case applePay
  case googlePay
  case thirdPartyToken
  public static func from(_ source: Spreedly.PaymentMethodType?) -> Spreedly._ObjCPaymentMethodType
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(SPRError) public class SpreedlyError : ObjectiveC.NSObject {
  @objc final public let key: Swift.String
  @objc final public let message: Swift.String
  @objc final public let attribute: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(SPRPaymentMethodResultBase) public class PaymentMethodResult : ObjectiveC.NSObject {
  @objc final public let token: Swift.String?
  final public let storageState: Spreedly.StorageState?
  @objc final public let test: Swift.Bool
  final public let paymentMethodType: Spreedly.PaymentMethodType?
  @objc final public let email: Swift.String?
  @objc final public let firstName: Swift.String?
  @objc final public let lastName: Swift.String?
  @objc final public let fullName: Swift.String?
  @objc final public let company: Swift.String?
  @objc final public let address: Spreedly.Address?
  @objc final public let shippingAddress: Spreedly.Address?
  @objc final public let errors: [Spreedly.SpreedlyError]
  @objc final public let metadata: Spreedly.Metadata?
  @objc public var shortDescription: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension PaymentMethodResult {
  @objc(paymentMethodType) dynamic public var _objCPaymentMethodType: Spreedly._ObjCPaymentMethodType {
    @objc get
  }
  @objc(storageState) dynamic public var _objCStorageState: Spreedly._ObjCStorageState {
    @objc get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SPRCreditCardResult) public class CreditCardResult : Spreedly.PaymentMethodResult {
  @objc public var cardType: Swift.String?
  public var year: Swift.Int?
  public var month: Swift.Int?
  @objc public var lastFourDigits: Swift.String?
  @objc public var firstSixDigits: Swift.String?
  @objc public var number: Swift.String?
  public var eligibleForCardUpdater: Swift.Bool?
  @objc public var callbackUrl: Swift.String?
  @objc public var fingerprint: Swift.String?
  @objc override public var shortDescription: Swift.String {
    @objc get
  }
  @objc(year) public var _objCYear: Swift.Int {
    @objc get
  }
  @objc(month) public var _objcMonth: Swift.Int {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SPRBankAccountResult) public class BankAccountResult : Spreedly.PaymentMethodResult {
  @objc public var bankName: Swift.String?
  @objc public var accountType: Spreedly.BankAccountType
  @objc public var accountHolderType: Spreedly.BankAccountHolderType
  @objc public var routingNumberDisplayDigits: Swift.String?
  @objc public var accountNumberDisplayDigits: Swift.String?
  @objc public var routingNumber: Swift.String?
  @objc public var accountNumber: Swift.String?
  @objc override public var shortDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SPRApplePayResult) public class ApplePayResult : Spreedly.CreditCardResult {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Address : ObjectiveC.NSObject {
  @objc public var address1: Swift.String?
  @objc public var address2: Swift.String?
  @objc public var city: Swift.String?
  @objc public var state: Swift.String?
  @objc public var zip: Swift.String?
  @objc public var country: Swift.String?
  @objc public var phoneNumber: Swift.String?
  public enum AddressType {
    case billing
    case shipping
    public static func == (a: Spreedly.Address.AddressType, b: Spreedly.Address.AddressType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @objc override dynamic public init()
  @objc public init(from other: Spreedly.Address)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SPRTransaction) public class Transaction : ObjectiveC.NSObject {
  @objc final public let token: Swift.String?
  @objc final public let createdAt: Foundation.Date?
  @objc final public let updatedAt: Foundation.Date?
  @objc final public let succeeded: Swift.Bool
  @objc final public let transactionType: Swift.String?
  @objc final public let retained: Swift.Bool
  @objc final public let state: Swift.String?
  @objc final public let messageKey: Swift.String
  @objc final public let message: Swift.String
  @objc final public let errors: [Spreedly.SpreedlyError]?
  @objc final public let paymentMethod: Spreedly.PaymentMethodResult?
  @objc public var creditCard: Spreedly.CreditCardResult? {
    @objc get
  }
  @objc public var bankAccount: Spreedly.BankAccountResult? {
    @objc get
  }
  @objc public var applePay: Spreedly.ApplePayResult? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class SingleTransactionSource {
  @objc deinit
}
@objc(SPRSingleTransaction) public class SingleTransaction : ObjectiveC.NSObject {
  public init(source: Spreedly.SingleTransactionSource)
  @objc public func subscribe(onSuccess: ((Spreedly.Transaction) -> Swift.Void)?, onError: ((Swift.Error) -> Swift.Void)? = nil)
  @objc override dynamic public init()
  @objc deinit
}
public typealias Metadata = [Swift.String : Any]
@objc @_inheritsConvenienceInitializers public class PaymentMethodInfo : ObjectiveC.NSObject {
  @objc public var email: Swift.String?
  @objc public var metadata: Spreedly.Metadata?
  @objc public var fullName: Swift.String?
  @objc public var firstName: Swift.String?
  @objc public var lastName: Swift.String?
  @objc public var company: Swift.String?
  @objc public var address: Spreedly.Address
  @objc public var shippingAddress: Spreedly.Address
  public var retained: Swift.Bool?
  @objc override dynamic public init()
  public init(copyFrom info: Spreedly.PaymentMethodInfo?)
  @objc deinit
}
public enum CardBrand : Swift.String {
  case alelo
  case amex
  case cabal
  case carnet
  case dankort
  case dinersClub
  case discover
  case elo
  case forbrubsforeningen
  case jcb
  case maestro
  case mastercard
  case naranja
  case sodexo
  case unionpay
  case visa
  case vr
  case unknown
  public static func from(_ number: Swift.String?) -> Spreedly.CardBrand
  public static func from(spreedlyType: Swift.String?) -> Spreedly.CardBrand
  public var maxLength: Swift.Int {
    get
  }
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc(SPRSecureOpaqueString) public protocol SpreedlySecureOpaqueString {
  @objc func clear()
  @objc func append(_ string: Swift.String)
  @objc func removeLastCharacter()
}
@_inheritsConvenienceInitializers @objc(SPRSecureOpaqueStringBuilder) public class SpreedlySecureOpaqueStringBuilder : ObjectiveC.NSObject {
  @objc public static func build(from string: Swift.String?) -> Spreedly.SpreedlySecureOpaqueString
  @objc deinit
  @objc override dynamic public init()
}
@objc(SPRClientConfiguration) public class ClientConfiguration : ObjectiveC.NSObject {
  @objc final public let envKey: Swift.String
  @objc final public let envSecret: Swift.String?
  @objc final public let test: Swift.Bool
  @objc final public let testCardNumber: Swift.String?
  @objc public init(envKey: Swift.String, envSecret: Swift.String? = nil, test: Swift.Bool = false, testCardNumber: Swift.String? = nil)
  @objc public static func getConfiguration() throws -> Spreedly.ClientConfiguration
  @objc deinit
  @objc override dynamic public init()
}
@objc(SPRClientError) public enum ClientError : Swift.Int, Swift.Error {
  case noSpreedlyCredentials
  case parseError
  case invalidRequestData
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc public class ApplePayInfo : Spreedly.PaymentMethodInfo {
  @objc public var testCardNumber: Swift.String?
  @objc convenience public init(payment: PassKit.PKPayment)
  @objc public init(paymentTokenData: Foundation.Data)
  public init(copyFrom info: Spreedly.PaymentMethodInfo?, payment: PassKit.PKPayment)
  @objc deinit
  @objc override dynamic public init()
  override public init(copyFrom info: Spreedly.PaymentMethodInfo?)
}
@objc public enum BankAccountType : Swift.Int, Swift.CaseIterable {
  case unknown
  case checking
  case savings
  public var stringValue: Swift.String? {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [Spreedly.BankAccountType]
  public static var allCases: [Spreedly.BankAccountType] {
    get
  }
}
@objc public enum BankAccountHolderType : Swift.Int, Swift.CaseIterable {
  case unknown
  case business
  case personal
  public var stringValue: Swift.String? {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [Spreedly.BankAccountHolderType]
  public static var allCases: [Spreedly.BankAccountHolderType] {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class BankAccountInfo : Spreedly.PaymentMethodInfo {
  @objc public var routingNumber: Swift.String?
  @objc public var accountNumber: Spreedly.SpreedlySecureOpaqueString?
  @objc public var accountType: Spreedly.BankAccountType
  @objc public var accountHolderType: Spreedly.BankAccountHolderType
  @objc override dynamic public init()
  override public init(copyFrom info: Spreedly.PaymentMethodInfo?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CreditCardInfo : Spreedly.PaymentMethodInfo {
  @objc public var number: Spreedly.SpreedlySecureOpaqueString?
  @objc public var verificationValue: Spreedly.SpreedlySecureOpaqueString?
  public var year: Swift.Int?
  public var month: Swift.Int?
  @objc override dynamic public init()
  override public init(copyFrom info: Spreedly.PaymentMethodInfo?)
  @objc deinit
}
extension CreditCardInfo {
  @objc(year) dynamic public var _objCYear: Swift.Int {
    @objc get
    @objc set
  }
  @objc(month) dynamic public var _objCMonth: Swift.Int {
    @objc get
    @objc set
  }
}
extension Spreedly.SpreedlySecurityError : Swift.Equatable {}
extension Spreedly.SpreedlySecurityError : Swift.Hashable {}
extension Spreedly.StorageState : Swift.Equatable {}
extension Spreedly.StorageState : Swift.Hashable {}
extension Spreedly.StorageState : Swift.RawRepresentable {}
extension Spreedly._ObjCStorageState : Swift.Equatable {}
extension Spreedly._ObjCStorageState : Swift.Hashable {}
extension Spreedly._ObjCStorageState : Swift.RawRepresentable {}
extension Spreedly.PaymentMethodType : Swift.Equatable {}
extension Spreedly.PaymentMethodType : Swift.Hashable {}
extension Spreedly.PaymentMethodType : Swift.RawRepresentable {}
extension Spreedly._ObjCPaymentMethodType : Swift.Equatable {}
extension Spreedly._ObjCPaymentMethodType : Swift.Hashable {}
extension Spreedly._ObjCPaymentMethodType : Swift.RawRepresentable {}
extension Spreedly.Address.AddressType : Swift.Equatable {}
extension Spreedly.Address.AddressType : Swift.Hashable {}
extension Spreedly.CardBrand : Swift.Equatable {}
extension Spreedly.CardBrand : Swift.Hashable {}
extension Spreedly.CardBrand : Swift.RawRepresentable {}
extension Spreedly.ClientError : Swift.Equatable {}
extension Spreedly.ClientError : Swift.Hashable {}
extension Spreedly.ClientError : Swift.RawRepresentable {}
extension Spreedly.BankAccountType : Swift.Equatable {}
extension Spreedly.BankAccountType : Swift.Hashable {}
extension Spreedly.BankAccountType : Swift.RawRepresentable {}
extension Spreedly.BankAccountHolderType : Swift.Equatable {}
extension Spreedly.BankAccountHolderType : Swift.Hashable {}
extension Spreedly.BankAccountHolderType : Swift.RawRepresentable {}
